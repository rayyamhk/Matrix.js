const Complex = require('@rayyamhk/complex');
const Matrix = require('../..');

describe('should get correct eigenvalues', () => {
  const tests = [
    {
      matrix: new Matrix([[10.123]]),
      expected: [
        new Complex(10.123),
      ],
    },
    {
      matrix: new Matrix([
        [-4, -3],
        [2, 11],
      ]),
      expected: [
        new Complex(10.588723439378912),
        new Complex(-3.588723439378912),
      ],
    },
    {
      matrix: new Matrix([
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
      ]),
      expected: [
        new Complex(0),
        new Complex(0),
        new Complex(0),
      ],
    },
    {
      matrix: new Matrix([
        [1, 0, 0],
        [0, 1, 0],
        [0, 0, 1],
      ]),
      expected: [
        new Complex(1),
        new Complex(1),
        new Complex(1),
      ],
    },
    {
      matrix: new Matrix([
        [3, -9, -5],
        [-5, 1, -2],
        [10, 9, 15 / 7],
      ]),
      expected: [
        new Complex(8.17922547797977),
        new Complex(-1.01818416756132, 7.08453564755957),
        new Complex(-1.01818416756132, -7.08453564755957),
      ],
    },
    {
      matrix: new Matrix([
        [13, -1, 14],
        [15, 3, -1],
        [-10, 1, -12],
      ]),
      expected: [
        new Complex(-1.41071006901164),
        new Complex(2.70535503450582, 1.82043876912447),
        new Complex(2.70535503450582, -1.82043876912447),
      ],
    },
    {
      matrix: new Matrix([
        [-11, -8, -2],
        [-15, -1, -12],
        [-15, 2, -8],
      ]),
      expected: [
        new Complex(-22.3376443691929),
        new Complex(1.16882218459644, 5.64369766035284),
        new Complex(1.16882218459644, -5.64369766035284),
      ],
    },
    {
      matrix: new Matrix([
        [-8, 15, 9, 9],
        [-9, 12, 3, -10],
        [11, 6, 1 / 3, 2],
        [5, -9, -2, -15],
      ]),
      expected: [
        new Complex(-9.28968794524108),
        new Complex(-20.7687154379723),
        new Complex(9.69586835827336, 4.82423353467931),
        new Complex(9.69586835827336, -4.82423353467931),
      ],
    },
    {
      matrix: new Matrix([
        [13, -12, 6, -9],
        [1, -11, -13, 0],
        [-6, -2, 15, -6],
        [14, -8, 1, 11],
      ]),
      expected: [
        new Complex(10.7046681565572),
        new Complex(-12.9152701010176),
        new Complex(15.1053009722302, 14.3131819845827),
        new Complex(15.1053009722302, -14.3131819845827),
      ],
    },
    {
      matrix: new Matrix([
        [4, 9, 3, 7],
        [-2, 4 / 5, -5, 14],
        [-1, 5, 10, -6],
        [-10, 14 / 15, 15, 6],
      ]),
      expected: [
        new Complex(3.45074100653913, 3.35036417642486),
        new Complex(3.45074100653913, -3.35036417642486),
        new Complex(6.94925899346087, 12.8681081465408),
        new Complex(6.94925899346087, -12.8681081465408),
      ],
    },
    {
      matrix: new Matrix([
        [-5, -1, 7 / 15, 3, 7],
        [5 / 2, 9 / 5, -15, 3 / 13, -14],
        [-2, 3, -4, -9, 6],
        [-9, 6, -8, 15, -1],
        [-4, 15, 12, -6, -3],
      ]),
      expected: [
        new Complex(20.276584352099803),
        new Complex(-0.26428972902806813, 17.903348053410365),
        new Complex(-0.26428972902806813, -17.903348053410365),
        new Complex(-13.48238454427786),
        new Complex(-1.4656203497657705),
      ],
    },
    {
      matrix: new Matrix([
        [4.4, -9.2, 0.8, -2.6, -0.7],
        [4.8, -1.5, -7.8, -8, -5.2],
        [-5.8, -7.8, -3.4, -0.3, 8.5],
        [-10, -6.4, 8.7, -1.7, -1.5],
        [-1.7, 3.3, 2.1, 9.0, 5.8],
      ]),
      expected: [
        new Complex(10.114364460348083, -5.784347877333158),
        new Complex(10.114364460348083, 5.784347877333158),
        new Complex(-7.309196290249057),
        new Complex(-4.659766315223537, -2.7216328532574496),
        new Complex(-4.659766315223537, 2.7216328532574496),
      ],
    },
    {
      matrix: new Matrix([
        [13, -5, 10, -6, 3],
        [-3, -1, 3, 5, -7],
        [2, 4, -4, 12, -3],
        [-7, -9, 3, 15, -13],
        [2, -5, 7, -13, 4],
      ]),
      expected: [
        new Complex(-14.641971639371077),
        new Complex(23.719677433512814),
        new Complex(12.854134361678028),
        new Complex(0.3072349936317842),
        new Complex(4.760924850548441),
      ],
    },
    {
      matrix: new Matrix([
        [-4, -2, 1, 12, -5],
        [-15, -1, 2, 5, 10],
        [13, -9, -3, -4, -5],
        [-4, -9, -10, 4 / 5, 10],
        [12, 9, -7, 0, -9],
      ]),
      expected: [
        new Complex(-15.240504498363531, 13.464212778121999),
        new Complex(-15.240504498363531, -13.464212778121999),
        new Complex(8.305303306229156),
        new Complex(2.9878528452489115, 1.8932109653149707),
        new Complex(2.9878528452489115, -1.8932109653149707),
      ],
    },
    {
      matrix: new Matrix([
        [19.25, 17.08, 2.84, 42.42, -37.69, 64.41],
        [-88.94, -77.20, 18.07, 28.78, -99.30, 74.94],
        [-5.03, 66.70, 44.03, 84.58, 72.70, 75.82],
        [33.08, -90.83, -10.67, -96.57, -47.05, -14.13],
        [76.15, -34.68, -34.31, 14.71, 17.52, 86.57],
        [-89.82, 53.29, -10.49, -36.49, -62.79, -35.09],
      ]),
      expected: [
        new Complex(15.250929842468707, -115.20186949371089),
        new Complex(15.250929842468707, 115.20186949371089),
        new Complex(36.101883692101325, -34.057064910925405),
        new Complex(36.101883692101325, 34.057064910925405),
        new Complex(-115.3828135345696, -58.418323505029264),
        new Complex(-115.3828135345696, 58.418323505029264),
      ],
    },
  ];

  tests.forEach((test, idx) => {
    it(`test ${idx + 1}: should get correct eigenvalues`, () => {
      expect.hasAssertions();
      const { matrix, expected } = test;
      const received = matrix.eigenvalues();
      received.forEach((eigenvalue) => {
        expect(!!expected.find((value) => Complex.isEqual(eigenvalue, value, 5))).toBe(true);
      });
    });
  });
});
